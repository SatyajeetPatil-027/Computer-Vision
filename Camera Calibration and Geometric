from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
import glob
from google.colab.patches import cv2_imshow

# Prepare object points (0,0,0), (1,0,0), ..., (6,5,0)
objp = np.zeros((6*7,3), np.float32)
objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2)

objpoints = []  # 3D points
imgpoints = []  # 2D points

# Load all images in the directory
images = glob.glob('/content/drive/MyDrive/C.V/chess board/*.jpg')

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    ret, corners = cv2.findChessboardCorners(gray, (7,6), None)

    if ret:
        objpoints.append(objp)
        imgpoints.append(corners)

        cv2.drawChessboardCorners(img, (7,6), corners, ret)
        cv2_imshow(img)
        cv2.waitKey(100)

#cv2.destroyAllWindows()

# Calibration
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print("Camera matrix:\n", mtx)
print("Distortion coefficients:\n", dist)

 def rotate_image(image, angle):
     (h, w) = image.shape[:2]  # get height and width
     center = (w // 2, h // 2)  # center of the image

     # Get rotation matrix for rotating the image around the center
     M = cv2.getRotationMatrix2D(center, angle, 1.0)  # scale=1.0 (no scaling)

     # Perform the rotation
     rotated = cv2.warpAffine(image, M, (w, h))

     return rotated

 def scale_image(image, scale_factor):
     # Get original dimensions
     (h, w) = image.shape[:2]

     # Calculate new dimensions
     new_w = int(w * scale_factor)
     new_h = int(h * scale_factor)

     # Resize image
     scaled = cv2.resize(image, (new_w, new_h), interpolation=cv2.INTER_LINEAR)

     return scaled

translated_img = translate_image(img, 7,25)
cv2_imshow(translated_img)
